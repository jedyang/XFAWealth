package com.fsll.wmes.ifafirm.action.console;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fsll.common.util.JsonUtil;
import com.fsll.common.util.UploadUtil;
import com.fsll.core.CoreConstants;
import com.fsll.core.entity.AccessoryFile;
import com.fsll.core.service.AccessoryFileService;
import com.fsll.wmes.base.WmesBaseAct;
import com.fsll.wmes.common.CommonConstantsWeb;
import com.fsll.wmes.entity.IfafirmTeam;
import com.fsll.wmes.entity.MemberAdmin;
import com.fsll.wmes.entity.MemberIfafirm;
import com.fsll.wmes.entity.MemberIfafirmEn;
import com.fsll.wmes.entity.MemberIfafirmSc;
import com.fsll.wmes.entity.MemberIfafirmTc;
import com.fsll.wmes.ifa.service.IfaManageService;
import com.fsll.wmes.ifafirm.service.IfafirmManageService;
import com.fsll.wmes.ifafirm.service.MyFirmService;
import com.fsll.wmes.ifafirm.vo.MemberIfafirmVO;
import com.fsll.wmes.investor.service.InvestorService;
import com.fsll.wmes.member.service.MemberManageServiceForConsole;
import com.fsll.wmes.member.vo.MemberSsoVO;

/**
 * 控制器:我的公司管理
 * @author wwluo
 * @version 1.0
 * @date 2016-08-30
 */
@Controller
@RequestMapping(value = "/console/myfirm")
public class ConsoleMyfirmAct extends WmesBaseAct{

	@Autowired
	private MyFirmService myFirmService;
	@Autowired
	private IfafirmManageService ifafirmService;
	@Autowired
	private MemberManageServiceForConsole memberManageService;
	@Autowired
	private InvestorService investorService;
	@Autowired
	private AccessoryFileService accessoryFileService;
	@Autowired
	private IfaManageService ifaManageService;
	
	
	/**
	 * 跳转我的公司管理页面
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@RequestMapping(value = "/myfirm", method = RequestMethod.GET)
	public String myFirmManager(HttpServletRequest request,HttpServletResponse response,ModelMap model) {
		
		String ifaFirmId = "8080804056a201d90156b01c3aeb0021";//test 待删除
		//String ifaFirmId = "06829AF2C1C691B408A789D84D31B6FA";//test 待删除
		//权限控制
		/*MemberSsoVO curMember = (MemberSsoVO) request.getSession().getAttribute(CoreConstants.CONSOLE_USER_LOGIN);
		if(CommonConstantsWeb.MEMBERBASE_MEMBERTYPE_IFA == curMember.getMemberType()){
			MemberAdmin memberAdmin = memberManageService.findAdminByMemberId(curMember.getId());
			if(null != memberAdmin && null != memberAdmin.getIfafirm())
				ifaFirmId = memberAdmin.getIfafirm().getId();
		}*/
		MemberIfafirmVO memberIfafirmVO = new MemberIfafirmVO();
        if(StringUtils.isNoneEmpty(ifaFirmId)){
        	MemberIfafirm ifafirm = ifafirmService.findById(ifaFirmId,null);
        	MemberIfafirmSc ifafirmSc = ifafirmService.findIfafirmScById(ifaFirmId);
        	MemberIfafirmTc ifafirmTc = ifafirmService.findIfafirmTcById(ifaFirmId);
        	MemberIfafirmEn ifafirmEn = ifafirmService.findIfafirmEnById(ifaFirmId);
        	BeanUtils.copyProperties(ifafirm, memberIfafirmVO);
        	if(null != ifafirmSc){
        		memberIfafirmVO.setCompanyNameSc(ifafirmSc.getCompanyName());
        	}
        	if(null != ifafirmTc){
        		memberIfafirmVO.setCompanyNameTc(ifafirmTc.getCompanyName());
        	}
        	if(null != ifafirmEn){
        		memberIfafirmVO.setCompanyNameEn(ifafirmEn.getCompanyName());
        	}
        }
        model.put("ifafirm", memberIfafirmVO);
		
		return "console/ifafirm/myfirm/myfirm";
	}
	
	/**
	 * 获取我公司下的组织架构
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/getOrg", method = RequestMethod.POST)
	public void getFirmOrgData(HttpServletRequest request,HttpServletResponse response,Model model) {
		String ifaFirmId = "";//test 待删除
		//String ifaFirmId = "06829AF2C1C691B408A789D84D31B6FA";//test 待删除
		//权限控制
		MemberSsoVO curMember = (MemberSsoVO) request.getSession().getAttribute(CoreConstants.CONSOLE_USER_LOGIN);
		if(CommonConstantsWeb.MEMBERBASE_MEMBERTYPE_IFA == curMember.getMemberType()){
			MemberAdmin memberAdmin = memberManageService.findAdminByMemberId(curMember.getId());
			if(null != memberAdmin && null != memberAdmin.getIfafirm())
				ifaFirmId = memberAdmin.getIfafirm().getId();
		}
		boolean flag = false;
		StringBuffer buffer = new StringBuffer();
		Map map = new HashMap();
		if(StringUtils.isNoneBlank(ifaFirmId)){
			List<IfafirmTeam> list = myFirmService.assemblyOrgMenu(ifaFirmId);	
			if(null != list &&!list.isEmpty()){
				flag = true;
				buffer.append("[");
				for (IfafirmTeam team : list) {
					team.setIfafirm(null);
					team.setParent(null);
				    buffer.append(JsonUtil.toJson(team));
				    buffer.replace(buffer.length()-1, buffer.length(),",\"childNode\":");
					getChildNode(buffer,team);
					buffer.append("},");
				}
				buffer.replace(buffer.length()-1, buffer.length(),"]");
			}
			MemberIfafirm ifaFirm = myFirmService.getIfafirmById(ifaFirmId);
			map.put("ifafirm", ifaFirm);
		}
		map.put("flag", flag);
		map.put("ifaFirmId", ifaFirmId);
		map.put("firmOrgJson", buffer.toString());
		JsonUtil.toWriter(map, response);
	}
	
	/***
     * 递归获取子节点
     * @author wwluo
     * @date 2016-08-30
     */
	public void getChildNode(StringBuffer buffer,IfafirmTeam team) {
	    if(null != team.getChildSet() && !team.getChildSet().isEmpty()){
	    	buffer.append("[");
	    	Integer length = buffer.length();
			for (IfafirmTeam childTeam : team.getChildSet()) {
				if("1".equals(childTeam.getIsValid())){
					childTeam.setIfafirm(null);
					childTeam.setParent(null);
					buffer.append(JsonUtil.toJson(childTeam));
					buffer.replace(buffer.length()-1, buffer.length(),",\"childNode\":");
					if(null != childTeam.getChildSet() && !childTeam.getChildSet().isEmpty()){
						getChildNode(buffer, childTeam);
					}else
						buffer.append("\"\"");
					buffer.append("},");
				}
			}
			if(length != buffer.length()){
				buffer.delete(buffer.length()-1, buffer.length());
			}
			buffer.append("]");
		}else
			buffer.append("\"\"");
	}
	
	/**
	 * 获取组织架构成员
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@RequestMapping(value = "/getTeamMember", method = RequestMethod.POST)
	public void getTeamMember(HttpServletRequest request,HttpServletResponse response,Model model) {
		String teamId = request.getParameter("teamId");
		jsonPaging = this.getJsonPaging(request);
		jsonPaging = myFirmService.getTeamMember(jsonPaging,teamId);
        this.toJsonString(response, jsonPaging);
	}
	
	/**
	 * 增加、修改组织机构
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/addOrg", method = RequestMethod.POST)
	public void addOrg(HttpServletRequest request,HttpServletResponse response,Model model) {
		String teamId = request.getParameter("teamId");
		String ifaFirmId = request.getParameter("ifaFirmId");
		String parentid = request.getParameter("parentid");
		String name = request.getParameter("name");
		String code = request.getParameter("code");
		String remark = request.getParameter("remark");
		IfafirmTeam team = new IfafirmTeam();
		if(StringUtils.isNotBlank(teamId)){
			team = ifafirmService.getIfafirmTeam(teamId);
		}else
			team.setId(teamId);
		team.setName(name);
		team.setCode(code);
		team.setReamrk(remark);
		team.setIsValid("1");
		team = myFirmService.saveAndUpdateOrg(team,ifaFirmId,parentid);
		boolean flag = false;
		if(null!=team){
			flag = true;
		}
		Map map = new HashMap();
		map.put("flag", flag);
		JsonUtil.toWriter(map, response);
	}
	
	/**
	 * 删除组织机构
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/deleteOrg", method = RequestMethod.POST)
	public void deleteOrg(HttpServletRequest request,HttpServletResponse response,Model model) {
		String teamId = request.getParameter("teamId");
        boolean flag = false;
        flag = myFirmService.deleteOrg(teamId);
		Map map = new HashMap();
		map.put("flag", flag);
		JsonUtil.toWriter(map, response);
	}
	
	/**
	 * ifafirm删除ifa
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/deleteIfa", method = RequestMethod.POST)
	public void deleteIfa(HttpServletRequest request,HttpServletResponse response,Model model) {
		String ifaId = request.getParameter("ifaId");
		boolean flag = false;
		flag = myFirmService.deleteIfa(ifaId);
		Map map = new HashMap();
		map.put("flag", flag);
		JsonUtil.toWriter(map, response);
	}
	
	/**
	 * 设置团队负责人
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/setLeader", method = RequestMethod.POST)
	public void setLeader(HttpServletRequest request,HttpServletResponse response,Model model) {
		String ifaId = request.getParameter("ifaId");
		String teamId = request.getParameter("teamId");
		String isSupervisor = request.getParameter("isSupervisor");
		boolean flag = false;
		flag = myFirmService.setLeader(ifaId,teamId,isSupervisor);
		Map map = new HashMap();
		map.put("flag", flag);
		JsonUtil.toWriter(map, response);
	}
	
	/**
	 * 跳转选择ifa弹窗
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@RequestMapping(value = "/selectIfadialog", method = RequestMethod.GET)
	public String selectIfadialog(HttpServletRequest request,HttpServletResponse response,ModelMap model) {
		return "console/ifafirm/myfirm/selectIfaDialog";
	}
	
	/**
	 * ifa管理员设置（设置&移除）
	 * @author wwluo
	 * @date 2016-08-30 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/setIfaAdmin", method = RequestMethod.POST)
	public void setIfaAdmin(HttpServletRequest request,HttpServletResponse response,Model model) {
		String ifaId = request.getParameter("ifaId");
		String isAdmin = request.getParameter("isAdmin");
		boolean flag = false;
		flag = myFirmService.setIfaAdmin(ifaId,isAdmin);
		Map map = new HashMap();
		map.put("flag", flag);
		JsonUtil.toWriter(map, response);
	}
	
	/**
	 * 获取该公司所有ifa
	 * @author wwluo
	 * @date 2016-09-02 
	 */
	@RequestMapping(value = "/ifalist", method = RequestMethod.POST)
	public void getIfaInIfaFirm(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String ifafirmId = "";//test 待删除
		//String ifafirmId = "06829AF2C1C691B408A789D84D31B6FA";//test 待删除
		String isAdminAccount = request.getParameter("isAdminAccount");
		//权限控制
		MemberSsoVO curMember = (MemberSsoVO) request.getSession().getAttribute(CoreConstants.CONSOLE_USER_LOGIN);
		if(CommonConstantsWeb.MEMBERBASE_MEMBERTYPE_IFA == curMember.getMemberType()){
			MemberAdmin memberAdmin = memberManageService.findAdminByMemberId(curMember.getId());
			if(null != memberAdmin && null != memberAdmin.getIfafirm())
				ifafirmId = memberAdmin.getIfafirm().getId();
		}
		String langCode = this.getLoginLangFlag(request);
		jsonPaging = this.getJsonPaging(request);
		if(StringUtils.isNotBlank(ifafirmId)){
		    jsonPaging = myFirmService.findIfaByIfaFirm(jsonPaging, ifafirmId, langCode, isAdminAccount);
		    //校准total
		    if( null != jsonPaging.getList() && !jsonPaging.getList().isEmpty()){
		    	jsonPaging.setTotal(jsonPaging.getList().size());
		    }
		}
	    this.toJsonString(response, jsonPaging);
	}
	
	/**
	 * 跳转选择 distributor 弹窗
	 * @author wwluo
	 * @date 2016-09-05 
	 */
	@RequestMapping(value = "/selectDistributordialog", method = RequestMethod.GET)
	public String selectDistributordialog(HttpServletRequest request,HttpServletResponse response,ModelMap model) {
		return "console/ifafirm/myfirm/selectDistributordialog";
	}
	
	/**
	 * 获取代理商    distributor
	 * @author wwluo
	 * @date 2016-09-05 
	 */
	@RequestMapping(value = "/distributorJson", method = RequestMethod.POST)
	public void getDistributorJson(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String companyName = request.getParameter("companyName");
		String entityType = request.getParameter("entityType");
		String langCode = this.getLoginLangFlag(request);
		jsonPaging = this.getJsonPaging(request);
		jsonPaging = myFirmService.getDistributorJson(jsonPaging,langCode,companyName,entityType);
		this.toJsonString(response, jsonPaging);
	}
	
	/**
	 * 公司logo修改
	 * @author wwluo
	 * @date 2016-09-05 
	 */
	@RequestMapping(value = "/attachUpdate", method = RequestMethod.POST)
	public void attachUpdate(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		//String ifafirmId = "06829AF2C1C691B408A789D84D31B6FA";//test 待删除
		String ifafirmId = request.getParameter("ifafirmId");
		//权限控制
		if(StringUtils.isBlank(ifafirmId)){
			MemberSsoVO curMember = (MemberSsoVO) request.getSession().getAttribute(CoreConstants.CONSOLE_USER_LOGIN);
			if(CommonConstantsWeb.MEMBERBASE_MEMBERTYPE_IFA == curMember.getMemberType()){
				MemberAdmin memberAdmin = memberManageService.findAdminByMemberId(curMember.getId());
				if(null != memberAdmin && null != memberAdmin.getIfafirm())
					ifafirmId = memberAdmin.getIfafirm().getId();
			}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		// 获取Servlet容器对象实际路径
    	String ctxPath = request.getSession().getServletContext().getRealPath("/");
		String filePath = null;
		boolean isMultipart = ServletFileUpload.isMultipartContent(request);
		if(isMultipart) {
			FileItemFactory factory = new DiskFileItemFactory();
			ServletFileUpload upload = new ServletFileUpload(factory);
			try {
				MemberIfafirm ifafirm = ifafirmService.findById(ifafirmId,null);
				List<FileItem> multiparts = upload.parseRequest(request);
				String imageName = null;
				String filename = null;
				for(FileItem item: multiparts) {
					if(!item.isFormField()) {
						imageName = item.getName();
						filePath = UploadUtil.getFileName(imageName,true,"firmLogo");
						filename = ctxPath + filePath;
						File localFile = new File(filename);
						if(!localFile.getParentFile().exists()){
							localFile.getParentFile().mkdirs();
						}
						item.write(new File( filename ));
					}
				}
				// 保存到AccessoryFile附件表
				AccessoryFile accessoryFile = new AccessoryFile();
				accessoryFile.setId(ifafirm.getFirmLogo());
				accessoryFile.setFileName(imageName);
				accessoryFile.setFilePath( filePath );
				accessoryFile.setFileType( imageName.substring(imageName.lastIndexOf(".")+1, imageName.length()) );
				accessoryFile.setModuleType("MemberIfafirm");
				accessoryFile.setLangCode(this.getLoginLangFlag(request));
				accessoryFile.setRelateId( ifafirmId );
//				accessoryFile.setCreateBy( this.getLoginUser(request) );//不能使用SysAdmin对象
				AccessoryFile accessoryFilePr = investorService.saveOrUpdateFileToAccessoryFile(accessoryFile);
			
				//记录附件Id
				ifafirm.setFirmLogo(accessoryFilePr.getId());
				ifafirmService.saveOrUpdate(ifafirm, false);
			} catch(Exception ex) {
				ex.printStackTrace();
				JsonUtil.toWriter(map, response);
			}
		} else {
			JsonUtil.toWriter(map, response);
		}
	}
	
	/**
	 * 加载公司logo
	 * @author wwluo
	 * @date 2016-09-05 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "/loadLogo", method = RequestMethod.POST)
	public void loadLogo(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		//String ifafirmId = "06829AF2C1C691B408A789D84D31B6FA";//test 待删除
		String ifafirmId = request.getParameter("ifafirmId");
		//权限控制
		if(StringUtils.isBlank(ifafirmId)){
			MemberSsoVO curMember = (MemberSsoVO) request.getSession().getAttribute(CoreConstants.CONSOLE_USER_LOGIN);
			if(CommonConstantsWeb.MEMBERBASE_MEMBERTYPE_IFA == curMember.getMemberType()){
				MemberAdmin memberAdmin = memberManageService.findAdminByMemberId(curMember.getId());
				if(null != memberAdmin && null != memberAdmin.getIfafirm())
					ifafirmId = memberAdmin.getIfafirm().getId();
			}
		}
		AccessoryFile accessoryFile = new AccessoryFile();
		if(StringUtils.isNotBlank(ifafirmId)){
			MemberIfafirm memberifafirm = myFirmService.getIfafirmById(ifafirmId);
			if(null != memberifafirm){
				String accessoryId = memberifafirm.getFirmLogo();
				if(StringUtils.isNotBlank(accessoryId))
					accessoryFile = accessoryFileService.findAccessoryFileById(accessoryId);
			}
		}
		Map map = new HashMap();
		map.put("accessoryFile", accessoryFile);
		JsonUtil.toWriter(map, response);
	}
	
	
	
	
	
	
	
}






















