/*
 * Copyright (c) 2009-2012 by fsll
 * All rights reserved.
 */

package com.fsll.common.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sun.misc.BASE64Decoder;

/**
 * @author 黄模建 E-mail:huangmojian@163.com
 * @version 1.0
 * Created On: Sep 26, 2011
 */
public class UploadUtil {
	
	private static final Logger log = LoggerFactory.getLogger(UploadUtil.class);
	
	// 上传文件存放路径
	public final static String UPLOADDIR = "/u";
	// 如果是图像，上传时生成的缩略图规格文件名 	add by 林文伟
	public final static String THUMBNAILSWH_112X100 = "_thumbnails_112x100_";
	public final static String THUMBNAILSWH_200X150 = "_thumbnails_200x150_";
	public final static String THUMBNAILSWH_400X300 = "_thumbnails_400x300_";
	public final static String THUMBNAILSWH_600X400 = "_thumbnails_600x400_";
	
	/**
	 * 路径分隔符
	 */
	public static final char SPT = '/';
	
	public static void saveFile(String fileName,File attachFile){  
		try {  
			  File toSave = new File(fileName);
			  FileUtils.copyFile(attachFile, toSave);
		} catch (FileNotFoundException ex) {  
		    ex.printStackTrace();  
		} catch (IOException ex) {  
		    ex.printStackTrace();  
		}  
   } 
	
	public static void removeFile(String fileName){
		File file = new File(fileName);
		if (file.delete()) {
			log.debug("删除未被使用的文件：{}", file.getName());
		} else {
			log.warn("删除文件失败：{}", file.getName());
		}
   } 
	
	public static void removeFileScore(String filePath){
		File file = new File(filePath);
		try{
		  if(file.exists()){
		    if (file.delete()) {
		   	  log.debug("删除未被使用的文件：{}", file.getName());
		    } else {
			  log.warn("删除文件失败：{}", file.getName());
		    }
		  }
		}catch(Exception e){
			e.printStackTrace();
		}
   } 
	/**
	 * 获文件名
	 * @param fileName 文件名
	 * @param isGenName 是否产生文件名
	 * @param module 文件类型
	 * @param suffix 后缀
	 * @return
	 */
	public static String getFileName(String fileName,boolean isGenName,String module) {
		String uploadPath = UPLOADDIR+SPT+module;
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		uploadPath += "/" + year + (month > 9 ? month : "0" + month);
		String suffix = fileName.substring(fileName.indexOf(".")+1);
		String targetFileName = UUID.randomUUID().toString() +"."+ suffix;
		uploadPath += "/" + targetFileName;
		return uploadPath;
	}
	
	/**
	 * 获文件名
	 * @param fileName 文件名
	 * @param isGenName 是否产生文件名
	 * @param module 文件类型
	 * @param suffix 后缀
	 * @return
	 */
	public static String getBigFileName(String module) {
		String uploadPath = UPLOADDIR+SPT+module;
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		uploadPath += "/" + year + (month > 9 ? month : "0" + month);	
		return uploadPath;
	}
	
	/**
	 * 获得文件名
	 * 4位随机数加上当前时间
	 */
	public static String genFileName(String fileName) {
		String suffix = fileName.substring(fileName.indexOf(".")+1);
		String targetFileName = UUID.randomUUID().toString() +"."+ suffix;
		return targetFileName;
	}
	
	/**
	 * 获得文件路径
	 * @return
	 */
	public static String genFilePath(String module) {
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String uploadPath = UPLOADDIR + SPT + module + SPT + year + (month > 9 ? month : "0" + month) + SPT;
		return uploadPath;
	}

	
	/**
	 * 读取图像的二进制流
	 * @param infile
	 * @return
	 */
	public static FileInputStream getByteImage(String infile) {
		FileInputStream inputImage = null;
		File file = new File(infile);
		try {
			inputImage = new FileInputStream(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return inputImage;
	}
	
	/**
	 * base64字符串转化成图片 并存储
	 * @author qgfeng
	 * @date 2016-9-30
	 * @param imgStr base64字符码
	 * @param filePath 存储路径
	 * @return
	 */
    public static boolean changeToFile(String imgStr,String filePath)  
    {   
        if (imgStr == null) 
            return false;  
        BASE64Decoder decoder = new BASE64Decoder();  
        try   
        {  
            byte[] b = decoder.decodeBuffer(imgStr);  
            for(int i=0;i<b.length;++i)  
            {  
                if(b[i]<0)  
                {
                    b[i]+=256;  
                }  
            }  
            OutputStream out = new FileOutputStream(filePath);      
            out.write(b);  
            out.flush();  
            out.close();  
            return true;  
        }   
        catch (Exception e)   
        {  
            return false;  
        }  
    }  
    
    /**
	 * 获文件名
	 * @author 林文伟
	 * @param fileName 文件名
	 * @param isGenName 是否产生文件名
	 * @param module 文件类型
	 * @param suffix 后缀
	 * @return
	 */
    public static String getThumbnailsFileName(String fileName,String thumbnailsWH) {
		String suffix = fileName.substring(fileName.indexOf(".")+1);
		String targetFileName = UUID.randomUUID().toString() + thumbnailsWH + "."+ suffix;
		return targetFileName;
	}
  

}
