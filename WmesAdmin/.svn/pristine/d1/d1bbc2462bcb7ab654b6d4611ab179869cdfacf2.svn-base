package com.fsll.wmes.ifa.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fsll.common.base.service.BaseService;
import com.fsll.common.util.DateUtil;
import com.fsll.common.util.JsonPaging;
import com.fsll.common.util.StrUtils;
import com.fsll.core.service.SysParamService;
import com.fsll.wmes.crm.vo.PortfolioVO;
import com.fsll.wmes.crm.vo.ProposalVO;
import com.fsll.wmes.entity.CrmProposal;
import com.fsll.wmes.entity.IfaDistributor;
import com.fsll.wmes.entity.IfafirmTeam;
import com.fsll.wmes.entity.IfafirmTeamIfa;
import com.fsll.wmes.entity.MemberIfa;
import com.fsll.wmes.entity.MemberIfaIfafirm;
import com.fsll.wmes.entity.MemberIfafirm;
import com.fsll.wmes.entity.PortfolioInfo;
import com.fsll.wmes.entity.StrategyInfo;
import com.fsll.wmes.ifa.service.IfaManageService;
import com.fsll.wmes.ifa.vo.AutoCompleteVO;
import com.fsll.wmes.ifa.vo.IfaDistributorVO;
import com.fsll.wmes.ifa.vo.StrategyInfoVO;
import com.fsll.wmes.member.vo.IfaVO;

/***
 * 业务接口实现类：ifa信息管理接口实现类
 * 
 * @author wwluo
 * @version 1.0
 * @date 2016-08-15
 */
@Service("ifaManageService")
//@Transactional
public class IfaManageServiceImpl extends BaseService implements IfaManageService {

	@Autowired
	private SysParamService sysParamService;
	
	/**
	 * 分页获取所有的ifa（假定一个IFA同已时间只与一家IFA Firm存在有效关系，不然会出现重复显示）
	 * @author qgfeng
	 * @date 2016-11-18
	 * 	modified by michael 20170320
	 * @param jsonPaging
	 * @param ifaVo 查询条件
	 * @param langCode
	 * @return jsonPaging （IfaVO 列表）
	 */
	@Override
	public JsonPaging findIfaByPage(JsonPaging jsonPaging, IfaVO ifaVo, String langCode) {
//		String hql =" select distinct r,lang.companyName,ifm.checkStatus,ifm.ifafirm.id ";
//		hql +=" from MemberIfa r left join MemberBase b on r.member.id=b.id and b.isValid='1' ";
//		hql +=" left join MemberIfaIfafirm ifm on r.id = ifm.ifa.id and ifm.checkStatus='1' and ifm.isValid='1' ";
//		hql +=" left join "+getLangString("MemberIfafirm", langCode);
//		hql +=" lang on ifm.ifafirm.id =lang.id ";
		
		String hql =" select r from MemberIfa r ,MemberBase b where r.member.id=b.id and b.isValid='1' ";
		List<String> parms = new ArrayList<String>();
		if (null != ifaVo && StringUtils.isNoneBlank(ifaVo.getKeyword())) {
			hql += " and (b.nickName like ? or b.loginCode like ? or r.nameChn like ?)";
			parms.add("%"+ifaVo.getKeyword()+"%");
			parms.add("%"+ifaVo.getKeyword()+"%");
			parms.add("%"+ifaVo.getKeyword()+"%");
		}
		if(StringUtils.isNoneBlank(ifaVo.getCompanyIfafirm()) || StringUtils.isNoneBlank(ifaVo.getIfafirmStatus())){
			hql+=" and r.id in (select ifm.ifa.id from  MemberIfaIfafirm ifm,"+getLangString("MemberIfafirm", langCode)+" lang " +
				"where ifm.ifafirm.id =lang.id  ";
			if(StringUtils.isNoneBlank(ifaVo.getCompanyIfafirm())){
				hql+=" and lang.companyName like ? ";
				parms.add("%"+ifaVo.getCompanyIfafirm()+"%");
			}
			if(StringUtils.isNoneBlank(ifaVo.getIfafirmStatus())){
				hql+=" and ifm.checkStatus = ? ";
				parms.add(ifaVo.getIfafirmStatus());
			}
			hql+=" )";
		}
		hql += " order by r.member.loginCode ";
		jsonPaging = this.baseDao.selectJsonPaging(hql, parms.toArray(), jsonPaging, false);
		List<IfaVO> list = new ArrayList<IfaVO>();
		Iterator it = jsonPaging.getList().iterator();
		while (it.hasNext()) {
			MemberIfa ifa = (MemberIfa) it.next();
			IfaVO vo = new IfaVO(ifa,langCode);
			
			List<MemberIfaIfafirm> firms = findIfaIfaFirm(ifa.getId(), null , "1", true, langCode);
			if (null!=firms && !firms.isEmpty()){
				MemberIfaIfafirm firm = firms.get(0);
				if (null!=firm && null!=firm.getIfafirm()){
					vo.setCompanyIfafirm(firm.getIfafirm().getCompanyName());
					vo.setIfafirmStatus(firm.getCheckStatus());
					vo.setIfafirmId(firm.getIfafirm().getId());
				}
			}
			
			list.add(vo);
		}
		jsonPaging.setList(list);
		return jsonPaging;
	}

	/***
	 * ifa关联的"团队"并跳转显示
     * @author wwluo midify qgfeng
	 * @date 2016-08-15
	 */
	@Override
	//@Transactional(readOnly = true)
	public JsonPaging findTeamByIfaId(JsonPaging jsonPaging, String ifaId) {
		StringBuffer hql = new StringBuffer("select team from IfafirmTeamIfa where ifa_id=?");
		List<String> params = new ArrayList<String>();
		params.add(ifaId);
		jsonPaging = this.baseDao.selectJsonPaging(hql.toString(), params.toArray(), jsonPaging, false);
		return jsonPaging;
	}

	/**
	 * 查询ifa所属ifafirm下的"组织架构"
	 * ]
	 * @author wwluo
	 * @date 2016-08-16
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	//@Transactional(readOnly = true)
	public JsonPaging findTeamByIfaFirm(JsonPaging jsonPaging, String ifaFirmId) {
		StringBuffer hql = new StringBuffer(" from IfafirmTeam where classLayer =1 and isValid=1 and ifafirm_id=? order by order_by");
		List paramsList = new ArrayList();
		paramsList.add(ifaFirmId);
		List list = this.baseDao.find(hql.toString(), paramsList.toArray(), false);
		jsonPaging.getList().clear();
		compositor(jsonPaging, list, ifaFirmId);
		return jsonPaging;
	}

	/***
	 * 对ifafirmTeam集合进行排序
	 * @author wwluo
	 * @date 2016-08-16
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void compositor(JsonPaging jsonPaging, List list, String ifaFirmId) {
		for (Object obj : list) {
			IfafirmTeam ifafirmTeam = (IfafirmTeam) obj;
			jsonPaging.getList().add(ifafirmTeam);
			String hql = " from IfafirmTeam where parent=? and isValid=1 and ifafirm_id=? order by order_by";
			List paramsList = new ArrayList();
			paramsList.add(ifafirmTeam);
			paramsList.add(ifaFirmId);
			List parantList = this.baseDao.find(hql.toString(), paramsList.toArray(), false);
			compositor(jsonPaging, parantList, ifaFirmId);
		}
	}

	/**
	 * ifa关联team
	 * @author wwluo
	 * @date 2016-08-16
	 */
	@Override
	public boolean saveIfafirmTeamIfa(String ifaFirmId, String teamId, String ifaId) {
		MemberIfafirm memberIfafirm = (MemberIfafirm) this.baseDao.get(MemberIfafirm.class, ifaFirmId);
		IfafirmTeam ifafirmTeam = (IfafirmTeam) this.baseDao.get(IfafirmTeam.class, teamId);
		MemberIfa memberIfa = (MemberIfa) this.baseDao.get(MemberIfa.class, ifaId);
		IfafirmTeamIfa ifafirmTeamIfa = new IfafirmTeamIfa();
		ifafirmTeamIfa.setIfa(memberIfa);
		ifafirmTeamIfa.setIfafirm(memberIfafirm);
		ifafirmTeamIfa.setTeam(ifafirmTeam);
		ifafirmTeamIfa.setIfa(memberIfa);
		ifafirmTeamIfa.setIsSupervisor("0");
		IfafirmTeamIfa obj = (IfafirmTeamIfa) this.baseDao.saveOrUpdate(ifafirmTeamIfa);
		boolean flag = false;
		if (null != obj) {
			flag = true;
		} else {
			flag = false;
		}
		return flag;
	}

	/**
	 * ifa取消关联team
	 * @author wwluo
	 * @date 2016-08-16
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public boolean removeIfafirmTeamIfa(String teamId, String ifaId) {
		StringBuffer hql = new StringBuffer(" from IfafirmTeamIfa where team_id=? and ifa_id=?");
		List params = new ArrayList<String>();
		params.add(teamId);
		params.add(ifaId);
		List ifafirmTeamIfaList = this.baseDao.find(hql.toString(), params.toArray(), false);
		if (null != ifafirmTeamIfaList && !ifafirmTeamIfaList.isEmpty()) {
			this.baseDao.delete(ifafirmTeamIfaList.get(0));
			return true;
		} else
			return false;
	}

	//------ end Team --------

	/**
	 * 查詢ifa
	 * 
	 * @author wwluo
	 * @date 2016-08-16
	 */
	public MemberIfa findIfaById(String ifaId) {
		if(StringUtils.isBlank(ifaId)){
			return null;
		}
		MemberIfa memberIfa = (MemberIfa) this.baseDao.get(MemberIfa.class, ifaId);
		return memberIfa;
	}

	

	/***
	 * 根据code查询基础数据
	 * 
	 * @author wwluo
	 * @date 2016-08-22
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List findSysparamByCode(String expertiseType) {
		List params = new ArrayList();
		List list = new ArrayList();

		StringBuffer hql = new StringBuffer(" from SysParamConfig where isValid=1");
		if (StringUtils.isNotEmpty(expertiseType) && expertiseType.indexOf(",") > -1) {
			String expertise[] = expertiseType.split(",");
			hql.append(" and configCode in(");
			for (int i = 0; i < expertise.length; i++) {
				hql.append("?,");
			}
			hql.delete(hql.length() - 1, hql.length());
			hql.append(" ) order by orderBy");
			list = this.baseDao.find(hql.toString(), expertise, false);
		} else {
			params.add(expertiseType);
			hql.append(" and configCode=? order by orderBy");
			list = this.baseDao.find(hql.toString(), params.toArray(), false);
		}
		return list;
	}

	@Override
	public JsonPaging findStrategyList(JsonPaging jsonPaging, StrategyInfo strategyInfo, String langCode) {
		StringBuilder hql = new StringBuilder();
		hql.append(" from StrategyInfo r where r.isValid='1' ");
		List<String> params = new ArrayList<String>();
		if (null != strategyInfo) {
			if(null != strategyInfo.getCreator()){
				hql.append(" and r.creator.id = ? ");
				params.add(strategyInfo.getCreator().getId());
			}
			if(StringUtils.isNotBlank(strategyInfo.getStrategyName())){
				hql.append(" and r.strategyName like ? ");
				params.add("%"+strategyInfo.getStrategyName()+"%");
			}
		}
		jsonPaging = baseDao.selectJsonPaging(hql.toString(), params.toArray(), jsonPaging, false);
		List<StrategyInfoVO> list = new ArrayList<StrategyInfoVO>();
		Iterator it = jsonPaging.getList().iterator();
		while (it.hasNext()) {
			StrategyInfo info = (StrategyInfo) it.next();
			StrategyInfoVO vo = new StrategyInfoVO();
			BeanUtils.copyProperties(info, vo);
			if(StringUtils.isNotBlank(vo.getGeoAllocation())){
				String geoAllocationName = sysParamService.findNameByCode(vo.getGeoAllocation(), langCode);
				vo.setGeoAllocationName(geoAllocationName);
			}
			if(StringUtils.isNoneBlank(vo.getSector())){
				String sectorName = sysParamService.findNameByCode(vo.getSector(), langCode);
				vo.setSectorName(sectorName);
			}
			if(info.getCreator()!=null){
				vo.setCreator(info.getCreator().getNickName());
			}
			list.add(vo);
		}
		jsonPaging.setList(list);
		return jsonPaging;
	}

	@Override
	public StrategyInfo findStragyById(String id) {
		StrategyInfo info = (StrategyInfo) this.baseDao.get(StrategyInfo.class, id);
		// TODO Auto-generated method stub
		return info;
	}

	@Override
	public JsonPaging findProposalList(JsonPaging jsonPaging, CrmProposal crmProposal) {
		String hql = " from CrmProposal r where r.isValid='1'";
		if (null != crmProposal) {
			if (null != crmProposal.getCreator()) {
				hql += " and r.creator.id = '" + crmProposal.getCreator().getId() + "'";
			}
			if (StringUtils.isNotBlank(crmProposal.getProposalName())) {
				hql += " and r.proposalName like '%" + crmProposal.getProposalName() + "%'";
			}
		}
		jsonPaging = this.baseDao.selectJsonPaging(hql, null, jsonPaging, false);
		List<ProposalVO> list = new ArrayList<ProposalVO>();
		Iterator it = jsonPaging.getList().iterator();
		while (it.hasNext()) {
			CrmProposal obj = (CrmProposal) it.next();
			ProposalVO vo = new ProposalVO();
			vo.setId(obj.getId());
			vo.setCreatorId(null != obj.getCreator() ? obj.getCreator().getId() : "");
			vo.setCreatorName(null != obj.getCreator() ? obj.getCreator().getNickName() : "");
			vo.setCurStep(obj.getCurStep());
			vo.setCurrencyType(obj.getBaseCurrId());
			vo.setCustomerId(null != obj.getMember() ? obj.getMember().getId() : "");
			vo.setCustomerName(null != obj.getMember() ? obj.getMember().getNickName() : "");
			vo.setEmailLogId(null != obj.getEmailLog() ? obj.getEmailLog().getId() : "");
			vo.setInitialInvestAmount(obj.getInitialInvestAmount());
			vo.setLiquidityNeed(obj.getLiquidityNeed());
			vo.setLrf(obj.getLrf());
			vo.setProposalName(obj.getProposalName());
			vo.setRemark(obj.getRemark());
			vo.setStatus(obj.getStatus());
			vo.setStrategyId(null != obj.getStrategy() ? obj.getStrategy().getId() : "");
			vo.setStrategyName(null != obj.getStrategy() ? obj.getStrategy().getStrategyName() : "");
			vo.setTaxConcerns(obj.getTaxConcerns());
			vo.setTimeFrame(obj.getTimeFrame());
			// vo.setTotalInvestAmount(obj.getTotalInvestAmount());
			vo.setUnp(obj.getUnp());
			vo.setCreateTime(obj.getCreateTime());
			list.add(vo);

		}
		jsonPaging.setList(list);
		return jsonPaging;
	}

	@Override
	public JsonPaging findPofolioList(JsonPaging jsonPaging,PortfolioVO pofo) {
		String hql = " from PortfolioInfo r where r.isValid='1' ";
		if(null != pofo){
			if (StringUtils.isNoneBlank(pofo.getCreatorId())) {
				hql += " and r.creator.id ='"+pofo.getCreatorId()+"' ";//ifa的memberId
			}
			if(StringUtils.isNoneBlank(pofo.getMemberId())){
				hql += " and r.member.id = '"+pofo.getMemberId()+"' ";//客户的memberId
			}
			if(StringUtils.isNotBlank(pofo.getPortfolioName())){
				hql += " and r.portfolioName like '%"+pofo.getPortfolioName()+"%' ";
			}
		}
		jsonPaging = this.baseDao.selectJsonPaging(hql, null, jsonPaging, false);
		List<PortfolioVO> list = new ArrayList<PortfolioVO>();
		Iterator it = jsonPaging.getList().iterator();
		while (it.hasNext()) {
			PortfolioInfo info = (PortfolioInfo) it.next();
			PortfolioVO vo = new PortfolioVO();
			vo.setAipType(info.getAipFlag());
			vo.setCreateTime(info.getCreateTime());
			vo.setCreator(null != info.getCreator() ? info.getCreator().getNickName() : "");
			vo.setCreatorId(null != info.getCreator() ? info.getCreator().getId() : "");
			vo.setCurrencyType(info.getBaseCurrency());
			vo.setId(info.getId());
			vo.setLoginCode(null != info.getMember() ? info.getMember().getLoginCode() : "");
			vo.setMemberId(null != info.getMember() ? info.getMember().getId() : "");
			vo.setNickName(null != info.getMember() ? info.getMember().getNickName() : "");
			vo.setPortfolioName(info.getPortfolioName());
			vo.setProposalId(null != info.getProposal() ? info.getProposal().getId() : "");
			vo.setProposalName(null != info.getProposal() ? info.getProposal().getProposalName() : "");
			list.add(vo);
		}
		jsonPaging.setList(list);
		return jsonPaging;
	}

	@Override
	public List getIfaInIfafirm(String ifafirmId) {
		String hql = " select r.member.id from MemberIfa r where r.ifafirm='" + ifafirmId + "'  and r.member.isValid='1'";
		List list = this.baseDao.find(hql, null, false);

		return list;
	}
	
	/**
	 * midify qgfeng
	 */
	@Override
	public List<AutoCompleteVO> findAutoIfa(String keyWord) {
		String hql = " from MemberIfa r where 1=1 ";
		List<String> params = new ArrayList<String>();
		if (StringUtils.isNotBlank(keyWord)) {
			hql += " and r.member.nickName like ?";
			params.add("%"+keyWord+"%");
		}
		List<MemberIfa> list = baseDao.find(hql, params.toArray(), false);
		List<AutoCompleteVO> finalList = new ArrayList<AutoCompleteVO>();
		Iterator<MemberIfa> iterator = list.iterator();
		while (iterator.hasNext()) {
			MemberIfa ifa = iterator.next();
			if(null != ifa.getMember()){
				AutoCompleteVO vo = new AutoCompleteVO();
				vo.setId(ifa.getId());
				vo.setName(ifa.getMember().getNickName());
				finalList.add(vo);
			}
		}
		return finalList;
	}
	/**
	 * IFA审批 （修改状态）
	 * @author qgfeng
	 * @date 2016-12-15
	 */
	@Override
	public boolean saveApprovalStatus(IfaVO ifaVO) {
		if(ifaVO == null){
			return false;
		}
		MemberIfaIfafirm ifaFrim = getIfaIfaFirmByIFrimId(ifaVO.getId(), ifaVO.getIfafirmId());
		if(ifaFrim != null){
			ifaFrim.setCheckStatus(ifaVO.getIfafirmStatus());
			ifaFrim.setLastUpdate(new Date());
			if(ifaFrim.getCheckDate() == null){
				ifaFrim.setCheckDate(new Date());
			}
			this.baseDao.update(ifaFrim);
			return true;
		}
		return false;
	}
	 /**
     * 根据ifaID、frimID查找MemberIfaIfafirm
     * @author qgfeng
     * @date 2016-12-15
     */
	@Override
	public MemberIfaIfafirm getIfaIfaFirmByIFrimId(String ifaId, String firmId) {
		if(StringUtils.isBlank(ifaId) || StringUtils.isBlank(firmId)){
			return null;
		}
		String hql = " from MemberIfaIfafirm r where r.ifa.id=? and r.ifafirm.id=?";
		List<String> parms = new ArrayList<String>();
		parms.add(ifaId);
		parms.add(firmId);
		List<MemberIfaIfafirm> list = this.baseDao.find(hql, parms.toArray(), false);
		if(list != null && !list.isEmpty()){
			return list.get(0);
		}
		return null;
	}
	
	 /**
     * 根据ifa查找MemberIfaIfafirm
     * @author michael
     * @date 2017-3-20
     * @param ifaId
     * @param checkStatus
     * @param isValid
     * @param validDate
     * @return List
     */
	public List<MemberIfaIfafirm> findIfaIfaFirm(String ifaId, String checkStatus, String isValid, Boolean validDate, String langCode) {
		if(StringUtils.isBlank(ifaId)){
			return null;
		}
		String hql = "select r,lang.companyName from MemberIfaIfafirm r left join "+getLangString("MemberIfafirm", langCode)+" lang on r.ifafirm.id=lang.id where r.ifa.id=? ";
		List<String> parms = new ArrayList<String>();
		parms.add(ifaId);
		if (StringUtils.isNoneBlank(checkStatus)){
			hql += " and r.checkStatus=? ";
			parms.add(checkStatus);
		}
		if (StringUtils.isNoneBlank(isValid)){
			hql += " and r.isValid=? ";
			parms.add(isValid);
		}
		/**
		 *  为什么要这段？？？scshi-20170411
		if (null!=validDate && validDate){
			hql += " and r.beginDate <= current_date() and ( r.endDate >= current_date() or r.endDate is null ) ";
		}
		**/
		List list = this.baseDao.find(hql, parms.toArray(), false);
		List<MemberIfaIfafirm> result = new ArrayList<MemberIfaIfafirm>();
		if (null!=list && !list.isEmpty()){
			for (int i=0;i<list.size();i++){
				Object[] objs = (Object[])list.get(i);
				MemberIfaIfafirm r = (MemberIfaIfafirm) objs[0];
				MemberIfafirm ifafirm = r.getIfafirm();
				ifafirm.setCompanyName(StrUtils.getString(objs[1]));
				result.add(r);
			}
		}
		return result;
	}
	 /**
     * 保存IFA-IFAFirm关联关系
     * @author qgfeng
     * @date 2016-12-16
     */
	@Override
	public MemberIfaIfafirm saveOrUpdateIfaIfafirm(MemberIfaIfafirm releInfo) {
		if(releInfo == null){
			return null;
		}
		releInfo = (MemberIfaIfafirm) baseDao.saveOrUpdate(releInfo);
		return null;
	}
	
	/**
     * 查询ae账户（IfaDistributor）
     * @author qgfeng
     * @date 2017-1-18
     */
	@Override
	public JsonPaging findIfaDisList(JsonPaging jsonPaging, String keyword) {
		String hql =" from IfaDistributor r where 1=1 ";
		List<String> parms = new ArrayList<String>();
		if (StringUtils.isNoneBlank(keyword)) {
			hql += " and (r.ifa.member.nickName like ? or r.ifa.member.loginCode like ? or r.distributor.companyName like ?)";
			parms.add("%"+keyword+"%");
			parms.add("%"+keyword+"%");
			parms.add("%"+keyword+"%");
		}
		jsonPaging = this.baseDao.selectJsonPaging(hql, parms.toArray(), jsonPaging, false);
		List<IfaDistributorVO> list = new ArrayList<IfaDistributorVO>();
		Iterator<IfaDistributor> it = jsonPaging.getList().iterator();
		while (it.hasNext()) {
			IfaDistributor info = it.next();
			IfaDistributorVO vo = new IfaDistributorVO();
			if(info.getIfa() != null && info.getIfa().getMember() !=null){
				vo.setIfaId(info.getIfa().getId());
				vo.setLoginCode(info.getIfa().getMember().getLoginCode());
				vo.setNickName(info.getIfa().getMember().getNickName());
			}
			if(info.getDistributor() != null){
				vo.setDistributorId(info.getDistributor().getId());
				vo.setCompanyName(info.getDistributor().getCompanyName());
			}
			vo.setId(info.getId());
			vo.setIsValid(info.getIsValid());
			vo.setAeCode(info.getAeCode());
			vo.setCreateTime(DateUtil.getDateStr(info.getCreateTime()));
			vo.setLastUpdate(DateUtil.getDateStr(info.getLastUpdate()));
			list.add(vo);
		}
		jsonPaging.setList(list);
		return jsonPaging;
	}
	/**
     * 根据id查找 IfaDistributor
     * @author qgfeng
     */
	@Override
	public IfaDistributor getIfaDisById(String id) {
		if(StringUtils.isBlank(id)){
			return null;
		}
		IfaDistributor info = (IfaDistributor) baseDao.get(IfaDistributor.class, id);
		return info;
	}

	@Override
	public IfaDistributor saveIfaDis(IfaDistributor ifaDistributor) {
		ifaDistributor = (IfaDistributor) baseDao.saveOrUpdate(ifaDistributor);
		return ifaDistributor;
	}
	/**
	 * 删除ae账户
	 * @author qgfeng
	 * @date 2017-1-18
	 */
	@Override
	public boolean deleteIfaDis(String id) {
		IfaDistributor dis = getIfaDisById(id);
		if(dis != null){
			baseDao.delete(dis);
			return true;
		}
		return false;
	}

	 /**
     * 根据ifaID 更新MemberIfaIfafirm记录为无效状态
     * @author michael
     * @date 2016-12-15
     */
	public boolean updateIfaIfaFirmToInvalid(String ifaId) {
		if(StringUtils.isBlank(ifaId) ){
			return false;
		}
		String hql = " update MemberIfaIfafirm r set isValid='0',lastUpdate=? where r.ifa.id=?";
		List<Object> parms = new ArrayList<Object>();
		parms.add(new Date());
		parms.add(ifaId);
		int c = this.baseDao.updateHql(hql, parms.toArray());
		if (c<=0) return false;
		return true;
	}
	
	/**
	 * 根据ifaid 获取is_vild=1的关联的ifafirm，
	 * @author scshi
	 * @date 2017-04-24
	 * */
	public MemberIfafirm findIfaFirmByIfaId(String ifaId,String langCode){
		StringBuffer sb = new StringBuffer("from MemberIfaIfafirm t  left join ");
		sb.append(" where t.ifa.id=? and t.isValid='1' and t.checkStatus='1' ");
		List<MemberIfaIfafirm> list = this.baseDao.find(sb.toString(), new String[]{ifaId}, false);
		if(null==list || list.isEmpty())return null;
		return list.get(0).getIfafirm();
	}
}
