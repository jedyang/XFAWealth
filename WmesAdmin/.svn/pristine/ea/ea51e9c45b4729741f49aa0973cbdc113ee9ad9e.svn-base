package com.fsll.wmes.notice.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.fsll.common.CommonConstants;
import com.fsll.common.base.service.BaseService;
import com.fsll.common.util.BeanUtils;
import com.fsll.common.util.DateUtil;
import com.fsll.common.util.JsonPaging;
import com.fsll.wmes.common.CommonConstantsWeb;
import com.fsll.wmes.entity.Notice;
import com.fsll.wmes.notice.service.NoticeService;
import com.fsll.wmes.notice.vo.NoticeVO;

@Service("noticeService")
public class NoticeServiceImpl extends BaseService implements NoticeService {

	/**
	 *  系统公告数据获取
	 * @author wwluo
	 * @date 2017-06-05
	 * @param jsonPaging
	 * @param noticeVO 查询数据过滤VO
	 * @return jsonPaging
	 */
	@Override
	public JsonPaging getSysNotices(JsonPaging jsonPaging, NoticeVO noticeVO) {
		StringBuffer hql = new StringBuffer(""
				+ " FROM"
				+ " Notice n"
				+ " WHERE"
				+ " n.sourceType=?"
				+ "");
		List<Object> params = new ArrayList<Object>();
		params.add(CommonConstantsWeb.NOTICE_SOURCE_TYPE_SYS);
		if (StringUtils.isNotBlank(noticeVO.getFilterTitle())) {
			hql.append(" AND n.subject LIKE ?");
			params.add("%" + noticeVO.getFilterTitle() + "%");
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterContent())) {
			hql.append(" AND n.content LIKE ?");
			params.add("%" + noticeVO.getFilterContent() + "%");
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterStatus())) {
			hql.append(" AND n.status=?");
			params.add(noticeVO.getFilterStatus());
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterStartTime()) && StringUtils.isNotBlank(noticeVO.getFilterEndTime())) {
			hql.append(" AND n.releaseDate BETWEEN ? AND ?");
			params.add(DateUtil.StringToDate(noticeVO.getFilterStartTime(), CommonConstants.FORMAT_DATE_TIME));
			params.add(DateUtil.StringToDate(noticeVO.getFilterEndTime(), CommonConstants.FORMAT_DATE_TIME));
		}
		jsonPaging = this.baseDao.selectJsonPaging(hql.toString(), params.toArray(), jsonPaging, false);
		if(jsonPaging.getList() != null && !jsonPaging.getList().isEmpty()){
			List<Notice> notices = jsonPaging.getList();
			List<NoticeVO> vos = new ArrayList<NoticeVO>();
			for (Notice notice : notices) {
				NoticeVO vo = new NoticeVO();
				BeanUtils.copyProperties(notice, vo);
				if(notice.getReleaseDate() != null){
					vo.setReleaseDateStr(DateUtil.dateToDateString(notice.getReleaseDate(), CommonConstants.FORMAT_DATE_TIME));
				}
				vos.add(vo);
			}
			jsonPaging.getList().clear();
			jsonPaging.getList().addAll(vos);
		}
		return jsonPaging;
	}

	/**
	 *  根据ID获取公告实体
	 * @author wwluo
	 * @date 2017-06-05
	 * @param id
	 * @return Notice
	 */
	@Override
	public Notice findById(String id) {
		return (Notice) this.baseDao.get(Notice.class, id);
	}

	/**
	 *  根据ID获取公告VO
	 * @author wwluo
	 * @date 2017-06-05
	 * @param id
	 * @return NoticeVO
	 */
	@Override
	public NoticeVO findNoticeVOById(String id) {
		NoticeVO vo = null;
		if (StringUtils.isNotBlank(id)) {
			Notice notice = (Notice) this.baseDao.get(Notice.class, id);
			if(notice != null){
				vo = new NoticeVO();
				BeanUtils.copyProperties(notice, vo);
				
			}
		}
		return vo;
	}

	/**
	 *  业务公告数据获取
	 * @author wwluo
	 * @date 2017-06-05
	 * @param jsonPaging
	 * @param noticeVO 查询数据过滤VO
	 * @return jsonPaging
	 */
	@Override
	public JsonPaging getConsoleNotices(JsonPaging jsonPaging, NoticeVO noticeVO) {
		StringBuffer hql = new StringBuffer(""
				+ " FROM"
				+ " Notice n"
				+ " WHERE"
				+ " n.sourceType<>?"
				+ "");
		List<Object> params = new ArrayList<Object>();
		params.add(CommonConstantsWeb.NOTICE_SOURCE_TYPE_SYS);
		if (StringUtils.isNotBlank(noticeVO.getFilterTitle())) {
			hql.append(" AND n.subject LIKE ?");
			params.add("%" + noticeVO.getFilterTitle() + "%");
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterContent())) {
			hql.append(" AND n.content LIKE ?");
			params.add("%" + noticeVO.getFilterContent() + "%");
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterStatus())) {
			hql.append(" AND n.status=?");
			params.add(noticeVO.getFilterStatus());
		}
		if (StringUtils.isNotBlank(noticeVO.getFilterStartTime()) && StringUtils.isNotBlank(noticeVO.getFilterEndTime())) {
			hql.append(" AND n.releaseDate BETWEEN ? AND ?");
			params.add(DateUtil.StringToDate(noticeVO.getFilterStartTime(), CommonConstants.FORMAT_DATE_TIME));
			params.add(DateUtil.StringToDate(noticeVO.getFilterEndTime(), CommonConstants.FORMAT_DATE_TIME));
		}
		jsonPaging = this.baseDao.selectJsonPaging(hql.toString(), params.toArray(), jsonPaging, false);
		if(jsonPaging.getList() != null && !jsonPaging.getList().isEmpty()){
			List<Notice> notices = jsonPaging.getList();
			List<NoticeVO> vos = new ArrayList<NoticeVO>();
			for (Notice notice : notices) {
				NoticeVO vo = new NoticeVO();
				BeanUtils.copyProperties(notice, vo);
				if(notice.getReleaseDate() != null){
					vo.setReleaseDateStr(DateUtil.dateToDateString(notice.getReleaseDate(), CommonConstants.FORMAT_DATE_TIME));
				}
				vos.add(vo);
			}
			jsonPaging.getList().clear();
			jsonPaging.getList().addAll(vos);
		}
		return jsonPaging;
	}

}
